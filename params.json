{
  "name": "Notch",
  "tagline": "Advanced eclipse code templates, commands and extensions via groovy scripts",
  "body": "# Notch\r\nNotch is a plugin for eclipse that extends the IDE with groovy scripts.\r\n\r\nSee [notch-scripts](https://github.com/stevenrowlands/notch-scripts) repository for some examples\r\n\r\n## Eclipse Templates with the Power of Groovy\r\n\r\nnotch extends the eclipse code template feature with the ability to run groovy code after the template is run. Take a look at these examples\r\n\r\n### Method Generation\r\n\r\nTemplate a standard private java field. Once the template is finished the getter and setter methods are automatically added to the end of your class. Notice the template variables are available for reference in the groovy closure allowing for programmatic manipulation of the values the user entered\r\n\r\n```\r\n    java.template(\"private \\${Type} \\${var};\", {\r\n        java.addMethod(\"public void set\" + var.substring(0,1).toUpperCase() + var.substring(1) + \"(\" + Type + \" \" + var +\") { this.\" + var + \"=\" + var + \"; }\")\r\n        java.addMethod(\"public \" + Type + \" get\" + var.substring(0,1).toUpperCase() + var.substring(1) + \"() { return this.\" + var + \";}\")\r\n    });\r\n```\r\n\r\n### Field Generation\r\n\r\nThis template adds a standard slf4j logger statement. If the logger field isn't available, the field is automatically generated at the top of your class. If the field is already there then just the template is invoked.\r\n\r\n```\r\n    java.addImport(\"org.slf4j.Logger\");\r\n    java.addImport(\"org.slf4j.LoggerFactory\");\r\n    java.addFieldFirst(\"private static final Logger LOGGER = LoggerFactory.getLogger(\" + java.className +\");\");\r\n    java.template(\"LOGGER.info(\\\"\\${msg}\\\");\\${cursor}\");\r\n```\r\n\r\n### Nest Templates\r\n\r\nThis template is just for the field type and then automatically infers the variable name (similar to eclipse proposals). Just enter the type name and the variable name will get automatically generated. template calls can be nested.\r\n\r\n```\r\n    java.template(\"\\${Type} \\${cursor}\", {\r\n        java.template(Type.toLowerCase() + \"= new \" + Type + \"(\\${arg1});\");\r\n    })\r\n```\r\n\r\n\r\n## Auto Expansion\r\n\r\nAuto expand previous text \r\n\r\nConsider this junit example. User has entered\r\n\r\n```\r\n    String a;\r\n    String b;\r\n```\r\n\r\nThey add\r\n\r\n```\r\n    String a;\r\n    String b;\r\n    a > b\r\n```\r\n\r\nThen do CTRL+ENTER (or other hotkey) at the end of the line. The code gets automatically expanded to (with imports)\r\n\r\n```\r\n    String a;\r\n    String b;\r\n    assertThat(a, greaterThan(b));\r\n```\r\n\r\nAll with the following script (shortened to just > and = for brevity)\r\n\r\n```\r\n    def line = text.getPrecedingLineText();\r\n    \r\n    String [] macros = line.split(\" \");\r\n    if (macros.length == 3) {\r\n        String operator;\r\n        java.addStaticImport(\"org.junit.Assert.assertThat\");\r\n        text.removePrecedingLineText();\r\n        if (macros[1] == \"=\") {\r\n            java.addStaticImport(\"org.hamcrest.CoreMatchers.equalTo\");\r\n            java.template(\"assertThat(\" + macros[0] + \",equalTo(\" + macros[2] + \"));\");\r\n        } else if (macros[1] == \">\") {\r\n            java.addStaticImport(\"org.hamcrest.Matchers.greaterThan\");\r\n            java.template(\"assertThat(\" + macros[0] + \",greaterThan(\" + macros[2] + \"));\\${cursor}\");\r\n        }\r\n    }\r\n```\r\n\r\n### Test Generation and Quick Switch\r\n\r\nThis example generates a test class automatically for the currently selected java class and opens it. If a test already exists, then it is simply opened. Running the script from the test class will shift focus back to the class under test.\r\n\r\n```\r\n    String packageName = java.packageName;\r\n    String content =  \"package \" + packageName + \";\"\r\n    String className = java.name + \"Test\";\r\n    if (java.name.contains(\"Test\")) {\r\n        javaproject.addFile(java.relativeName.replace(\"test\",\"src\").replace(\"Test.java\", \".java\"),content);\r\n        return;\r\n    }\r\n    \r\n    content = content + \"\\n\" + \"public class \" + className + \"{\\n}\";\r\n    javaproject.addFile(java.relativeName.replace(\"src\",\"test\").replace(\".java\", \"Test.java\"),content);\r\n    \r\n    java.addImport(\"org.junit.Test\");\r\n```\r\n\r\n## Hotkeys\r\n\r\nAll commands/templates can be registered to hotkeys allowing for quick access.\r\n\r\n\r\n##API\r\n\r\n### Text Binding\r\n\r\n```\r\n    /**\r\n     * Adds text and then positions the cursor at the end of the text\r\n     * \r\n     * @param text to insert\r\n     */\r\n    void addText(String text);\r\n\r\n    /**\r\n     * @return the text preceding the current cursor position\r\n     */\r\n    String getPrecedingLineText();\r\n\r\n    /**\r\n     * Removes and returns the preceding line of text. Cursor will be positioned at the indentation of the line\r\n     * \r\n     * @return the preceding line text that was removed\r\n     */\r\n    String removePrecedingLineText();\r\n```\r\n\r\n### Java Binding\r\n\r\nThe following api can be used with the 'java' binding. e.g. java.addImport(\"some.Example\")\r\n\r\n```\r\n    /**\r\n     * Adds an import to a java class\r\n     * @param import the fully qualified class name to add as an import\r\n     * @return the eclipse import declaration that was created\r\n     */\r\n    void addImport(String contents);\r\n    \r\n    /**\r\n     * Adds a constructor to a java class. The constructor is automatically added\r\n     * at the top of the class after any fields and before any methods are defined\r\n     * \r\n     * @param constructor the full java code that defines the constructor\r\n     * @return the eclipse method that was created\r\n     */\r\n    void addConstructor(String contents);\r\n    \r\n    \r\n    /**\r\n     * Adds a method to a java class. The method is automatically added\r\n     * at the bottom of the class\r\n     * \r\n     * @param constructor the full java code that defines the method\r\n     * @return the eclipse method that was created\r\n     */\r\n    void addMethod(String contents);\r\n    \r\n    \r\n    \r\n    /**\r\n     * Adds a method to a java class. The method is automatically added\r\n     * at the top of the class\r\n     * \r\n     * @param constructor the full java code that defines the method\r\n     * @return the eclipse method that was created\r\n     */\r\n    void addFieldFirst(String contents);\r\n    \r\n    \r\n    /**\r\n     * Adds a method to a java class. The method is automatically added\r\n     * at the bottom of the class\r\n     * \r\n     * @param constructor the full java code that defines the method\r\n     * @return the eclipse method that was created\r\n     */\r\n    void addFieldLast(String contents);\r\n    \r\n        \r\n    /**\r\n     * Creates a template and runs the closure at completion.\r\n     * \r\n     * @param template the eclipse template\r\n     * @param closure the closure to run after the template is finished\r\n     */\r\n    void template(String template, Closure closure);\r\n    void template(String template);\r\n  }\r\n```\r\n\r\n## Getting Started\r\n\r\nInstall from the [Neon](https://stevenrowlands.github.io/notch/neon) update site\r\nOR\r\nInstall from the [Mars](https://stevenrowlands.github.io/notch/mars) update site\r\n\r\nClone the [notch-scripts](https://github.com/stevenrowlands/notch-scripts) repository for some examples\r\n\r\nConfigure the 'Notch' preference page to point at the scripts\r\n\r\nAdd your hotkeys (all commands are listed as their filename) and you are ready to go.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}